@model coderush.Models.SalesOrder
@{
    ViewData["Title"] = "Sale Detail";
}
<style>
    .my-custom-scrollbar {
        position: relative;
        height: 175px;
        overflow: auto;
    }

    .table-wrapper-scroll-y {
        display: block;
    }
</style>
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
    <!-- Main content -->
    <section class="content">
        <!-- Default box -->
        <div class="row">
            <div class="col-lg-6">
                <div class="box" style="height:250px">
                    <div class="box-header with-border">
                        <h3 class="box-title"><i class="fa fa-building"></i> @ViewData["Title"]</h3>
                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                                    title="Collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                            <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                                <i class="fa fa-times"></i>
                            </button>
                        </div>
                    </div>
                    <div class="box-body">
                        <div class="content-container-fluid" style="height: 150px;">
                            <div class="row">
                                <dl class="dl-horizontal">

                                    <dt>
                                        Drug Sale Number
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.SalesOrderName)
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.CustomerId)
                                    </dt>
                                    <dd>
                                        <input type="text" id="CustomerId" />
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.PrescriptionId)
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.Prescription.PrescriptionName)
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.PatientRefNumber)
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.PatientRefNumber)
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.SaleDate)
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.SaleDate)
                                    </dd>
                                    <dt>
                                        Invoice
                                    </dt>
                                    @if (Model.Invoice != null)
                                    {
                                        <dd>
                                            @Html.DisplayFor(model => model.Invoice.InvoiceName)
                                        </dd>
                                        <dt>
                                            Payments
                                        </dt>
                                        @if (!Model.Invoice.fullyPaid)
                                        {

                                            <dd>
                                                <button id="Payment" onclick="MakePayment()">Make payment</button>
                                            </dd>

                                        }
                                           else { 
                                            <dd>
                                                Fully Paid
                                            </dd>
                                        }

                                    }
                                    else
                                    {
                                        <dd>
                                            <button id="Invoice" onclick="Invoice()"> Create Invoice</button>
                                        </dd>
                                    }

                                </dl>
                            </div>

                        </div>

                    </div>
                </div>
            </div>
            @if (Model.Invoice == null)
            {
                <div class="col-lg-6">
                    <div class="box" style="height:250px">
                        <div class="box-header with-border">
                            <h3 class="box-title text-primary"><i class="fa fa-pie-chart"></i> Prescriptions</h3>
                            <div class="box-tools pull-right">
                                <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                                        title="Collapse">
                                    <i class="fa fa-minus"></i>
                                </button>
                                <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                                    <i class="fa fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="box-body">
                            <div class="Prescription">
                                <div class="table-wrapper-scroll-y my-custom-scrollbar">
                                    <table id="Prescription" align="center" class="table-condensed table-bordered table-striped mb-0" style="width:100%">
                                        <thead>
                                            <tr>
                                                <th> # </th>
                                                <th>product Name</th>
                                                <th>Units of Measure</th>
                                                <th>Quantity</th>
                                                <th>Cost per unit</th>
                                                <th>Add</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="col-lg-6">
                    <div class="box" style="height:250px">
                        <div class="box-header with-border ">
                            <h3 class="box-title text-primary"><i class="fa fa-pie-chart"></i> @Model.Invoice.InvoiceName</h3>
                            <div class="box-tools pull-right">
                                <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                                        title="Collapse">
                                    <i class="fa fa-minus"></i>
                                </button>
                                <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                                    <i class="fa fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="box-body">
                            <div class="payment">
                                <div class="table-wrapper-scroll-y my-custom-scrollbar">
                                    <table id="payment" align="center" class="table table-bordered table-striped mb-0" style="width:100%">
                                        <thead>
                                            <tr>
                                                <th> # </th>
                                                <th>Payment Name</th>
                                                <th>Payment type</th>
                                                <th>Amount</th>
                                                <th>Payment Code</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

        </div>

        <!-- /.box -->
        <div class="box">

            <div class="box-body">
                <div class="row">
                    <div class="col-lg-12">
                        <div id="Grid"></div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-8">
                    </div>
                    <div class="col-lg-4">
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.DisplayNameFor(model => model.Remarks)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Remarks)
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.Amount)
                            </dt>
                            <dd>
                                <label id="Amount" name="Amount">@Model.Amount</label>
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.Discount)
                            </dt>
                            <dd>
                                <label id="Discount" name="Discount">@Model.Discount</label>
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.SubTotal)
                            </dt>
                            <dd>
                                <label id="SubTotal" name="SubTotal">@Model.SubTotal</label>
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.Tax)
                            </dt>
                            <dd>
                                <label id="Tax" name="Tax">@Model.Tax</label>
                            </dd>
                            @*<dt>
                                    @Html.DisplayNameFor(model => model.Freight)
                                </dt>
                                <dd>
                                    <label id="Freight" name="Freight">@Model.Freight</label>
                                </dd>*@
                            <dt>
                                @Html.DisplayNameFor(model => model.Total)
                            </dt>
                            <dd>
                                <label id="Total" name="Total">@Model.Total</label>
                            </dd>
                        </dl>
                    </div>
                </div>

            </div>
        </div>
    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->

<div id="dialog">
    <table class="table">
        <tr>
            <td>
                Drug Name:
            </td>
            <td>
                <label id="DrugName" name="DrugName"></label>
            </td>
            <td>
                Units of Measure:
            </td>
            <td>
                <label id="UnitsofMeasure" name="UnitsofMeasure"></label>
            </td>
        </tr>
        <tr>
            <td>
                Generic type
            </td>
            <td>
                <label id="genericType" name="genericType"></label>
            </td>
            <td>
                InStock
            </td>
            <td>
                <label id="instock" name="instock"></label>
            </td>

        </tr>
        <tr>

            <td>
                Cost per unit:
            </td>
            <td>
                <label id="Cost" name="Cost"></label>
            </td>
        </tr>
        <tr>
            <td>
                Quantity:
            </td>
            <td>
                <input id="Quantity" type="number" onchange="NewAmount(this.value)" />
            </td>
            <td>
                Amount
            </td>
            <td>
                <label id="CostAmount" name="CostAmount"></label>
            </td>
        </tr>
        <tr>
            <td>
                Discount Percentage
            </td>
            <td>
                <input id="Disc" type="number" value=0 />
            </td>

        </tr>
        <tr>
            <td>
                Tax Percentage
            </td>
            <td>
                <input id="TaxPer" type="number" value=0 />
            </td>

        </tr>
        <tr>
            <td>
                <button id="btnsubmit" type="button" onclick="Submit()"> Submit</button>
            </td>
            <td>
                <p id="sendp" style="color: green">Submiting... </p>
            </td>
        </tr>
    </table>

</div>
<div id="dialogInvoice">
    <table class="table">
        <tr>
            <td>
                Drug Sell number
            </td>
            <td>
                @Html.DisplayFor(model => model.SalesOrderName)
            </td>
        </tr>
        <tr>
            <td>
                Invoice Due date
            </td>
            <td>
                <input id="InvoiceDuedate" />
            </td>
        </tr>
        <tr>
            <td>
                <button id="btnInvoiceSubmit" onclick="InvoiceSubmit()">Submit</button>
            </td>
            <td>
                <p id="sendInvoice" style="color: green">Submiting... </p>
            </td>
        </tr>
    </table>
</div>
<div id="dialogPayment">
    <table>
        <tr>
            <td>
                Invoice
            </td>
            <td>
                @if (Model.Invoice != null)
                {
                    @Model.Invoice.InvoiceName
                    <input id="invoiceId" value="@Model.Invoice.InvoiceId" style="display:none" />
                }
            </td>
            <td>
                Full payment
            </td>
            <td>
                <input type="checkbox" id="fullpayment" />
            </td>
        </tr>
        <tr>
            <td>
                Payment date
            </td>
            <td>
                <input id="Paymentdate" />
            </td>
            <td>
                Payment Type
            </td>
            <td>
                <input id="PaymentTypeId" />
            </td>
        </tr>
        <tr>
            <td>
                Payment Amount
            </td>
            <td>
                <input type="number" id="payAmount" value=0/>
            </td>
            <td>
                Payment Code
            </td>
            <td>
                <input type="text" id="code" />
            </td>
        </tr>
        <tr>
            <td>
                <button id="submitPay" onclick="Payment()">Submit</button>
            </td>
            <td>
                <p id="sendpay" style="color: green">Submiting... </p>
            </td>
        </tr>
    </table>
</div>

@section Styles{

}
@section Scripts{
    <script type="text/javascript">

        var Item;
        var Batch;
        var GoodsRecievedNoteLineId;
        var InvoiceDuedate;
        var fullpay = false;
        var Paymentdate;
        var PaymentTypeId;
        var paymentType;
        var InvoiceId;

        // sumbit payment data to database
        function Payment() {
            var amount = $("#payAmount").val();
            if (amount == "") {
                amount = "0";
            }
            var InvoiceId = $("#invoiceId").val();
            var code = $("#code").val();
            data = {
                InvoiceId: InvoiceId,
                PaymentDate: Paymentdate,
                PaymentTypeId: PaymentTypeId,
                PaymentAmount: parseInt(amount),
                IsFullPayment: fullpay,
                PaymentCode: code
            }
            if (data.PaymentTypeId == null) {
                toastr.warning("Select a payment method");
            } else if (data.PaymentDate == null) {
                toastr.warning("Select a date");
            } else {
                $.ajax({
                    type: "POST",
                    contentType: "application/json;charset=utf-8",
                    data: JSON.stringify(data),
                    url: "/api/PaymentReceive/Add",
                    beforeSend: function () {
                        $("#sendpay").show();
                        $("#submitPay").prop('disabled', true);
                    },
                    success: function (result) {
                        $("#sendpay").hide();
                        $("#submitPay").prop('disabled', false);
                        toastr.success("Success");
                        //for (let i = 0; i < paymentType.length; i++) {
                        //    if (paymentType[i].PaymentTypeId == result.PaymentTypeId) {
                        //        if (paymentType[i].RequireUpload) {
                        //            $("#uploadp").show();
                        //            $("#uploadDiv").show();
                        //            $("#UploadDefault").ejUploadbox({
                        //                saveUrl: "/api/UploadFiles",
                        //                allowDraggable: true,
                        //                multipleFilesSelection: true,
                        //                success: function (args) {
                        //                    toastr.success("Success");
                        //                },
                        //                beforeSend: function (args) {
                        //                    args.xhr.setRequestHeader("test", result.PaymentReceiveId );
                        //                }
                        //            });
                        //         }
                        //    }
                        //}

                    },
                    error: function (result) {
                        $("#sendpay").hide();
                        var s = ej.parseJSON(result.responseText)
                        toastr.warning(s.message, "Cannot make sale");
                        $("#submitPay").prop('disabled', false);
                    }
                });
            }
        }
        // open payment diaog
        function MakePayment() {

            $.ajax({
                type: 'GET',
                url: "/api/PaymentType",
                success: function (data) {
                    paymentType = data.Items;
                    $('#PaymentTypeId').ejDropDownList({
                        dataSource: paymentType,
                        fields: { id: 'PaymentTypeId', text: 'PaymentTypeName', value: 'PaymentTypeId' },
                        change: function (args) {
                            PaymentTypeId = args.value;
                        }
                    });
                }
            });

            $("#dialogPayment").ejDialog("open");
            $("#sendpay").hide();
            $("#fullpayment").ejCheckBox({
                change: function (args) {
                    fullpay = args.isChecked;
                }
            });
            $("#Paymentdate").ejDatePicker({
                width: "75%",
                change: function (args) {
                    Paymentdate = args.value;
                }
            });
        }
        // open invoice dialog
        function Invoice() {
            $("#dialogInvoice").ejDialog("open");
            $("#sendInvoice").hide();
            $("#InvoiceDuedate").ejDatePicker({
                width: "75%",
                change: function (args) {
                    InvoiceDuedate = args.value;
                }
            });
        }
        // sumbit invoice data to databse
        function InvoiceSubmit() {
            data = {
                SalesOrderId: @Model.SalesOrderId,
                InvoiceDueDate: InvoiceDuedate,
                InvoiceTypeId: 1
            }
            if (data.InvoiceDueDate == null) {
                toastr.warning("Select a date")
            }
            else {
                $.ajax({
                    type: "POST",
                    contentType: "application/json;charset=utf-8",
                    data: JSON.stringify(data),
                    url: "/api/Invoice/Add",
                    beforeSend: function () {
                        $("#sendInvoice").show();
                        $("#btnInvoiceSubmit").prop('disabled', true);
                    },
                    success: function (result) {
                        $("#sendInvoice").hide();
                        $("#btnInvoiceSubmit").prop('disabled', false);
                        toastr.success("Success");
                        InvoiceId = result.InvoiceId;

                    },
                    error: function (result) {
                        $("#sendInvoice").hide();
                        var s = ej.parseJSON(result.responseText)
                        toastr.warning(s.message, "Cannot make sale");
                        $("#btnInvoiceSubmit").prop('disabled', false);
                    }
                });
            }

        }
        // opens saleorderline data to databse
        function myFunction(item) {
            Item = item;
            $("#dialog").ejDialog("open");
            $("#sendp").hide();
            $("#DrugName").text(Item.Product.ProductName);
            $("#UnitsofMeasure").text(Item.Product.UnitOfMeasure.UnitOfMeasureName);
            $("#genericType").text(Item.Product.ProductType.ProductTypeName); 
            $("#instock").text(Item.Product.InStock);
            $("#Quantity").val(Item.Quantity);
            $("#Cost").text(Item.Product.DefaultSellingPrice);
            Amount = Item.Quantity * Item.Product.DefaultSellingPrice;
            $("#CostAmount").text(Amount);
            $("#DiscAmount").val();
            $("#TaxPer").val();
        }
        function NewAmount(x) {
            amount = x * parseInt($("#Cost").val());
            $("#CostAmount").text(amount);
        }
        function NewCost(x) {
            amount = x * parseInt($("#Quantity").val());
            $("#CostAmount").text(amount);
        }
        // sumbit saleorderline data to databse
        function Submit() {
            Price = $("#Cost").val();
            DiscountPercentage = $("#Disc").val();
            TaxPercentage = $("#TaxPer").val();
            Quantity = $("#Quantity").val();
            if (DiscountPercentage == "") {
                DiscountPercentage = "0";
            }
            if (TaxPercentage == "") {
                TaxPercentage = "0";
            }
            if (Quantity == "") {
                Quantity = "0";
            }
            if (Price == "") {
                Price = "0";
            }
            var data = {
                "SalesOrderId": @Model.SalesOrderId,
                "Total": 0,
                "TaxAmount":0 ,
                "TaxPercentage": parseInt(TaxPercentage),
                "SubTotal": 0,
                "DiscountAmount": 0,
                "DiscountPercentage": parseInt(DiscountPercentage),
                "Amount": 0,
                "Price": Item.Product.DefaultSellingPrice,
                "Quantity": parseInt(Quantity),
                "ProductId": Item.Product.ProductId,
            }

            if (data.Quantity < 1) {
                toastr.warning("Quantity can not be less than 1", "Cannot make sale");
            }
            else {
                $("#Grid").ejGrid("addRecord", data);
            }
        }
        // fill prescription line data to databse
        function PrescriptionLines() {
             $.ajax({
                type: 'GET',
                url: '/api/PrescriptionLines/GetByPrescriptionId/' +@Model.PrescriptionId ,
                success: function (data) {
                    if (data.Count == 0) {
                        $("div.Prescription").replaceWith("<h4>No prescription Available</h4>");
                    } else {
                        var table = document.getElementById("Prescription");
                        item = data.Items;
                        d = 0;
                        for (let i = 0; i < item.length; i++) {
                            var row = table.insertRow(-1)
                            row.insertCell(0).innerHTML = i+1;
                            row.insertCell(1).innerHTML = item[i].Product.ProductName;
                            row.insertCell(2).innerHTML = item[i].Product.UnitOfMeasure.UnitOfMeasureName;
                            row.insertCell(3).innerHTML = item[i].Quantity;
                            row.insertCell(4).innerHTML = item[i].Product.DefaultSellingPrice;
                            row.insertCell(5).innerHTML = "<Input onclick='myFunction(item["+i+"])' type='button' value = 'Add'>";

                        }
                    }
                }
            });
        }
        // fill data into payment list table
        function PaymentsList(InvoiceId) {
               $.ajax({
                type: 'GET',
                   url: '/api/PaymentReceive/GetbyInvoiceId/' + InvoiceId,
                   success: function (data) {
                       if (data.Count == 0) {
                           $("div.payment").replaceWith("<h4>No payment Available</h4>");
                       } else {
                           var table = document.getElementById("payment");
                           item = data.Items;
                           d = 0;
                           for (let i = 0; i < item.length; i++) {
                               var row = table.insertRow(-1)
                               row.insertCell(0).innerHTML = i + 1;
                               row.insertCell(1).innerHTML = item[i].PaymentReceiveName;
                               row.insertCell(2).innerHTML = item[i].PaymentType.PaymentTypeName;
                               row.insertCell(3).innerHTML = item[i].PaymentAmount;
                               row.insertCell(4).innerHTML = item[i].PaymentCode;

                           }
                       }
                }
            });
        }
        $(function () {
            var InvoiceId = $("#invoiceId").val();
            if (InvoiceId == null) {
                PrescriptionLines();
            } else {
                PaymentsList(InvoiceId)
            }

            $('#dialog').ejDialog({
                title: "Sale Record",
                showOnInit: false,
                height: 500,
                width: 600,

            });
            $('#dialogInvoice').ejDialog({
                title: "Invoice",
                showOnInit: false,
                close: function (args) {
                    location.reload();
                }

            });
            $('#dialogPayment').ejDialog({
                title: "Payment",
                width: 500,
                height: 400,
                showOnInit: false,
                close: function (args) {
                    location.reload();
                }

            });
            var dataManager = ej.DataManager({
                url: "/api/SalesOrderLine",
                adaptor: new ej.WebApiAdaptor(),
                headers: [{ "SalesOrderId": @Model.SalesOrderId}],
                offline: true
            });
            var dataManagerProduct = ej.DataManager({
                url: "/api/Product",
                adaptor: new ej.WebApiAdaptor()
            });
            var dataManagerGoodsRecievedNoteLines = ej.DataManager({
                url: "/api/GoodsRecievedNoteLines",
                adaptor: new ej.WebApiAdaptor()
            });
            var dataManagerSalesOrder = ej.DataManager({
                url: "/api/SalesOrder",
                adaptor: new ej.WebApiAdaptor()
            });
            var dataManagerStock = ej.DataManager({
                url: "/api/Branch",
                adaptor: new ej.WebApiAdaptor()
            });
            var dataManagerCustomer = ej.DataManager({
                url: "/api/Customer",
                adaptor: new ej.WebApiAdaptor()
            });
            var dataManagerCurrency = ej.DataManager({
                url: "/api/Currency",
                adaptor: new ej.WebApiAdaptor()
            });
            var dataManagerSalesType = ej.DataManager({
                url: "/api/SalesType",
                adaptor: new ej.WebApiAdaptor()
            });
            $('#CustomerId').ejDropDownList({
                dataSource: dataManagerCustomer,
                fields: { id: 'CustomerId', text: 'CustomerName', value: 'CustomerId' },
                value: @Model.CustomerId,
                enabled: false,
            });
            dataManager.ready.done(function (e) {
            $("#Grid").ejGrid({
                dataSource: ej.DataManager({
                    json: e.result,
                    adaptor: new ej.remoteSaveAdaptor(),
                    insertUrl: "/api/SalesOrderLine/Insert",
                    updateUrl: "/api/SalesOrderLine/Update",
                    removeUrl: "/api/SalesOrderLine/Remove",
                }),
                toolbarSettings: {
                    showToolbar: true,
                    toolbarItems: ["add", "delete", "update", "cancel"]
                },
                editSettings: {
                    allowEditing: false,
                    allowAdding: true,
                    allowDeleting: true,
                    showDeleteConfirmDialog: true,
                },
                allowPaging: true,
                columns: [
                    { field: "SalesOrderLineId", headerText: 'Line Id', isPrimaryKey: true, isIdentity: true, visible: false },
                    { field: "SalesOrderId", headerText: 'SO#', defaultValue: @Model.SalesOrderId, foreignKeyField: "SalesOrderId", foreignKeyValue: "SalesOrderName", dataSource: dataManagerSalesOrder, visible: false },
                    { field: "ProductId", headerText: 'Product', foreignKeyField: "ProductId", foreignKeyValue: "ProductName", dataSource: dataManagerProduct, validationRules: { required: true }  },
                    { field: "GoodsRecievedNoteLineId", headerText: 'BatchID', foreignKeyField: "GoodsRecievedNoteLineId", foreignKeyValue: "BatchID", dataSource: dataManagerGoodsRecievedNoteLines, allowEditing: false },
                    { field: "Description", headerText: 'Description', visible: false },
                    { field: "Quantity", headerText: 'Qty', defaultValue: 1, editType: "numericedit", format: "{0:n2}"},
                    { field: "Price", headerText: 'Cost per unit', defaultValue: 0, editType: "numericedit", format: "{0:n2}" },
                    { field: "Amount", headerText: 'Amount', defaultValue: 0, allowEditing: false, editType: "numericedit", format: "{0:n2}" },
                    { field: "DiscountPercentage", headerText: 'Disc %', defaultValue: 0, editType: "numericedit", format: "{0:n2}" },
                    { field: "DiscountAmount", headerText: 'Disc Amt', defaultValue: 0, visible: false, editType: "numericedit", format: "{0:n2}" },
                    { field: "SubTotal", headerText: 'SubTotal', defaultValue: 0, allowEditing: false, editType: "numericedit", format: "{0:n2}" },
                    { field: "TaxPercentage", headerText: 'Tax %', defaultValue: 0, editType: "numericedit", format: "{0:n2}" },
                    { field: "TaxAmount", headerText: 'Tax Amt', defaultValue: 0, visible: false, editType: "numericedit", format: "{0:n2}" },
                    { field: "Total", headerText: 'Total', defaultValue: 0, allowEditing: false, editType: "numericedit", format: "{0:n2}" },
                ],
                actionComplete: "complete",
                actionFailure: function (args) {
                    if (args.requestType == "save") {
                        var s = ej.parseJSON(args.error.responseText)
                        toastr.warning(s.message, "Cannot make sale");
                    }
                    if (args.requestType == 'delete') {
                        var s = ej.parseJSON(args.error.error.responseText)
                        toastr.warning(s.message,"Cannot delete");
                    }
                }
            });
            });
        });
        function complete(args) {

            if (args.requestType == 'beginedit') {
                $("#" + this._id + "_dialogEdit").ejDialog({ title: "Edit Record" });
            }
            if (args.requestType == 'save') {
                UpdateGrid();
            }
            if (args.requestType == 'save' || args.requestType == 'delete') {
                RewriteTotal(args.data.SalesOrderId);
            }
        }
        function UpdateGrid() {
            var dataManager = ej.DataManager({
                url: "/api/SalesOrderLine",
                adaptor: new ej.WebApiAdaptor(),
                headers: [{ "SalesOrderId": @Model.SalesOrderId}],
                offline: true
            });
            dataManager.ready.done(function (e) {
                $("#Grid").ejGrid("dataSource", ej.DataManager({
                    json: e.result,
                    adaptor: new ej.remoteSaveAdaptor(),
                    insertUrl: "/api/SalesOrderLine/Insert",
                    updateUrl: "/api/SalesOrderLine/Update",
                    removeUrl: "/api/SalesOrderLine/Remove",
                }));
            });
            
           
        }
        function RewriteTotal(salesOrderId) {
            $.ajax({
                type: 'GET',
                url: '/api/SalesOrder/GetById/' + salesOrderId,
                success: function (data) {
                    $('#Amount').text(data.Amount);
                    $('#SubTotal').text(data.SubTotal);
                    $('#Discount').text(data.Discount);
                    $('#Tax').text(data.Tax);
                    $('#Freight').text(data.Freight);
                    $('#Total').text(data.Total);
                }
            });
        }
    </script>
}
