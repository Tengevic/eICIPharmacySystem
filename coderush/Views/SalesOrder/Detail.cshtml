@model coderush.Models.SalesOrder
@{
    ViewData["Title"] = "Sales Order Detail";
}
<style>
    .my-custom-scrollbar {
        position: relative;
        height: 150px;
        overflow: auto;
    }

    .table-wrapper-scroll-y {
        display: block;
    }
</style>
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
    <!-- Main content -->
    <section class="content">
        <!-- Default box -->
        <div class="row">
            <div class="col-lg-6">
                <div class="box">
                    <div class="box-header with-border">
                        <h3 class="box-title"><i class="fa fa-building"></i> @ViewData["Title"]</h3>
                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                                    title="Collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                            <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                                <i class="fa fa-times"></i>
                            </button>
                        </div>
                    </div>
                    <div class="box-body">
                        <div class="content-container-fluid" style="height: 150px;">
                            <div class="row">
                                <dl class="dl-horizontal">
                                    <dt>
                                        @Html.DisplayNameFor(model => model.SalesOrderId)
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.SalesOrderId)
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.SalesOrderName)
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.SalesOrderName)
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.CustomerId)
                                    </dt>
                                    <dd>
                                        <input type="text" id="CustomerId" />
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.PrescriptionId)
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.Prescription.PrescriptionName)
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.SaleDate)
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.SaleDate)
                                    </dd>

                                </dl>
                            </div>

                        </div>

                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="box">
                    <div class="box-header with-border">
                        <h3 class="box-title text-primary"><i class="fa fa-pie-chart"></i> Prescriptions</h3>
                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                                    title="Collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                            <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                                <i class="fa fa-times"></i>
                            </button>
                        </div>
                    </div>
                    <div class="box-body">
                        <div class="Prescription">
                            <div class="table-wrapper-scroll-y my-custom-scrollbar">
                                <table id="Prescription" align="center" class="table-condensed table-bordered table-striped mb-0">
                                    <thead>
                                        <tr>
                                            <th> # </th>
                                            <th>product Name</th>
                                            <th>Units of Measure</th>
                                            <th>Quantity</th>
                                            <th>Cost per unit</th>
                                            <th>Add</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                           
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- /.box -->
        <div class="box">

            <div class="box-body">
                <div class="row">
                    <div class="col-lg-12">
                        <div id="Grid"></div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-8">
                    </div>
                    <div class="col-lg-4">
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.DisplayNameFor(model => model.Remarks)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Remarks)
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.Amount)
                            </dt>
                            <dd>
                                <label id="Amount" name="Amount">@Model.Amount</label>
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.Discount)
                            </dt>
                            <dd>
                                <label id="Discount" name="Discount">@Model.Discount</label>
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.SubTotal)
                            </dt>
                            <dd>
                                <label id="SubTotal" name="SubTotal">@Model.SubTotal</label>
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.Tax)
                            </dt>
                            <dd>
                                <label id="Tax" name="Tax">@Model.Tax</label>
                            </dd>
                            @*<dt>
                                    @Html.DisplayNameFor(model => model.Freight)
                                </dt>
                                <dd>
                                    <label id="Freight" name="Freight">@Model.Freight</label>
                                </dd>*@
                            <dt>
                                @Html.DisplayNameFor(model => model.Total)
                            </dt>
                            <dd>
                                <label id="Total" name="Total">@Model.Total</label>
                            </dd>
                        </dl>
                    </div>
                </div>

            </div>
        </div>
    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->

<div id="dialog">
    <table class="table">
        <tr>
            <td>
                Drug Name:
            </td>
            <td>
                <label id="DrugName" name="DrugName"></label>
            </td>
            <td>
                Units of Measure:
            </td>
            <td>
                <label id="UnitsofMeasure" name="UnitsofMeasure"></label>
            </td>
        </tr>
        <tr>
            <td>
                batch No
            </td>
            <td>
                <input id="GoodsRecievedNoteLineId" />
            </td>
            <td>
                InStock
            </td>
            <td>
                <label id="instock" name="instock"></label>
            </td>
        </tr>
        <tr>
            <td>
                Quantity:
            </td>
            <td>
                <input id="Quantity" type="number" onchange="NewAmount(this.value)" />
            </td>
            <td>
                Cost per unit:
            </td>
            <td>
                <label id="Cost" name="Cost"></label>
            </td>
        </tr>
        <tr>
            <td>
                Amount
            </td>
            <td>
                <label id="CostAmount" name="CostAmount"></label>
            </td>
        </tr>
        <tr>
            <td>
                Discount Percentage
            </td>
            <td>
                <input id="Disc" type="number" value=0 />
            </td>

        </tr>
        <tr>
            <td>
                Tax Percentage
            </td>
            <td>
                <input id="TaxPer" type="number" value=0 />
            </td>

        </tr>
        <tr>
            <td>
                <button id="btnsubmit" type="button" onclick="Submit()"> Submit</button>
            </td>
            <td>
                <p id="sendp" style="color: green">Sending... </p>
            </td>
        </tr>
    </table>

</div>
<script>

    var Item;
    var Batch;
    var GoodsRecievedNoteLineId;
    function myFunction(item) {
        Item = item;
        $.ajax({
            type: 'GET',
            url: '/api/GoodsRecievedNoteLines/GetByProductId/' + item.Product.ProductId,
            success: function (data) {
                Batch = data;
                $('#GoodsRecievedNoteLineId').ejDropDownList({
                    dataSource: Batch,
                    fields: { id: 'GoodsRecievedNoteLineId', text: 'BatchID', value: 'GoodsRecievedNoteLineId' },
                    change: function (args) {
                        for (let i = 0; i < Batch.length; i++) {
                            if (Batch[i].GoodsRecievedNoteLineId == args.value) {
                                $("#instock").text(Batch[i].InStock);
                                GoodsRecievedNoteLineId =  args.value;
                            }
                        }
                    }
                });

            }
        });

        $("#dialog").ejDialog("open");
        $("#sendp").hide();
        $("#DrugName").text(Item.Product.ProductName);
        $("#UnitsofMeasure").text(Item.Product.UnitOfMeasure.UnitOfMeasureName);
        $("#Quantity").val(Item.Quantity);
        $("#Cost").text(Item.Product.DefaultSellingPrice);
        Amount = Item.Quantity * Item.Product.DefaultSellingPrice;
        $("#CostAmount").text(Amount);
        $("#DiscAmount").val();
        $("#TaxPer").val();
    }
    function NewAmount(x) {
        Amount = x * Item.Product.DefaultSellingPrice;
        $("#CostAmount").text(Amount);
    }
    function Submit() {
        DiscountPercentage = $("#Disc").val();
        TaxPercentage = $("#TaxPer").val();
        Quantity = $("#Quantity").val();
        if (DiscountPercentage == "") {
            DiscountPercentage = "0";
        }
        if (TaxPercentage == "") {
            TaxPercentage = "0";
        }
        if (Quantity == "") {
            Quantity = "0";
        }
        var data = {
            "SalesOrderId": @Model.SalesOrderId,
            "Total": 0,
            "TaxAmount":0 ,
            "TaxPercentage": parseInt(TaxPercentage),
            "SubTotal": 0,
            "DiscountAmount": 0,
            "DiscountPercentage": parseInt(DiscountPercentage),
            "Amount": 0,
            "Price": 0,
            "GoodsRecievedNoteLineId": GoodsRecievedNoteLineId,
            "Quantity": parseInt(Quantity),
            "ProductId": Item.Product.ProductId,
        }

        if (data.GoodsRecievedNoteLineId == null) {
            toastr.warning("Select Batch number", "Cannot make sale");
        } else if (data.Quantity < 1) {
            toastr.warning("Quantity can not be less than 1", "Cannot make sale");
        }
        else {
            $.ajax({
                type: "POST",
                contentType: "application/json;charset=utf-8",
                data: JSON.stringify(data),
                url: "/api/SalesOrderLine/Add",
                beforeSend: function () {
                    $("#sendp").show();
                    $("#btnsubmit").prop('disabled', true);
                },
                success: function (result) {
                    $("#sendp").hide();
                    $("#btnsubmit").prop('disabled', false);
                    toastr.success("Success");
                },
                error: function (result) {
                    var s = ej.parseJSON(result.responseText)
                    toastr.warning(s.message, "Cannot make sale");
                }
            });
        }
    }

</script>

@section Styles{

}
@section Scripts{
    <script type="text/javascript">
        $(function () {

            $.ajax({
                type: 'GET',
                url: '/api/PrescriptionLines/GetByPrescriptionId/' +@Model.PrescriptionId ,
                success: function (data) {
                    if (data.Count == 0) {
                        $("div.Prescription").replaceWith("<h4>No prescription Available</h4>");
                    } else {
                        var table = document.getElementById("Prescription");
                        item = data.Items;
                        d = 0;
                        for (let i = 0; i < item.length; i++) {
                            var row = table.insertRow(-1)
                            row.insertCell(0).innerHTML = i+1;
                            row.insertCell(1).innerHTML = item[i].Product.ProductName;
                            row.insertCell(2).innerHTML = item[i].Product.UnitOfMeasure.UnitOfMeasureName;
                            row.insertCell(3).innerHTML = item[i].Quantity;
                            row.insertCell(4).innerHTML = item[i].Product.DefaultSellingPrice;
                            row.insertCell(5).innerHTML = "<Input onclick='myFunction(item["+i+"])' type='button' value = 'Add'>";
                            d = d + 1;
                        }
                    }
                }
            });
            $('#dialog').ejDialog({
                title: "Sale Record",
                showOnInit: false,
                height: 400,
                width: 600,
                close: function (args) {
                    location.reload();
                }

            });
            var dataManager = ej.DataManager({
                url: "/api/SalesOrderLine",
                adaptor: new ej.WebApiAdaptor(),
                headers: [{ "SalesOrderId": @Model.SalesOrderId}],
                offline: true
            });

            var dataManagerProduct = ej.DataManager({
                url: "/api/Product",
                adaptor: new ej.WebApiAdaptor()
            });
            var dataManagerGoodsRecievedNoteLines = ej.DataManager({
                url: "/api/GoodsRecievedNoteLines",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerSalesOrder = ej.DataManager({
                url: "/api/SalesOrder",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerStock = ej.DataManager({
                url: "/api/Branch",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerCustomer = ej.DataManager({
                url: "/api/Customer",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerCurrency = ej.DataManager({
                url: "/api/Currency",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerSalesType = ej.DataManager({
                url: "/api/SalesType",
                adaptor: new ej.WebApiAdaptor()
            });



            $('#CustomerId').ejDropDownList({
                dataSource: dataManagerCustomer,
                fields: { id: 'CustomerId', text: 'CustomerName', value: 'CustomerId' },
                value: @Model.CustomerId,
                enabled: false,
            });
            dataManager.ready.done(function (e) {
            $("#Grid").ejGrid({
                dataSource: ej.DataManager({
                    json: e.result,
                    adaptor: new ej.remoteSaveAdaptor(),
                    insertUrl: "/api/SalesOrderLine/Insert",
                    updateUrl: "/api/SalesOrderLine/Update",
                    removeUrl: "/api/SalesOrderLine/Remove",
                }),
                toolbarSettings: {
                    showToolbar: true,
                    toolbarItems: ["add", "edit", "delete", "update", "cancel"]
                },
                editSettings: {
                    allowEditing: true,
                    allowAdding: true,
                    allowDeleting: true,
                    showDeleteConfirmDialog: true,


                },
                allowPaging: true,
                columns: [
                    { field: "SalesOrderLineId", headerText: 'Line Id', isPrimaryKey: true, isIdentity: true, visible: false },
                    { field: "SalesOrderId", headerText: 'SO#', defaultValue: @Model.SalesOrderId, foreignKeyField: "SalesOrderId", foreignKeyValue: "SalesOrderName", dataSource: dataManagerSalesOrder, visible: false },
                    { field: "ProductId", headerText: 'Product', foreignKeyField: "ProductId", foreignKeyValue: "ProductName", dataSource: dataManagerProduct },
                    { field: "GoodsRecievedNoteLineId", headerText: 'BatchID', foreignKeyField: "GoodsRecievedNoteLineId", foreignKeyValue: "BatchID", dataSource: dataManagerGoodsRecievedNoteLines },
                    { field: "Description", headerText: 'Description', visible: false },
                    { field: "Quantity", headerText: 'Qty', defaultValue: 1, editType: "numericedit" },
                    { field: "Price", headerText: 'Cost per unit', defaultValue: 0, allowEditing: false, editType: "numericedit", format: "{0:n2}" },
                    { field: "Amount", headerText: 'Amount', defaultValue: 0, allowEditing: false, editType: "numericedit", format: "{0:n2}" },
                    { field: "DiscountPercentage", headerText: 'Disc %', defaultValue: 0, editType: "numericedit", format: "{0:n2}" },
                    { field: "DiscountAmount", headerText: 'Disc Amt', defaultValue: 0, visible: false, editType: "numericedit", format: "{0:n2}" },
                    { field: "SubTotal", headerText: 'SubTotal', defaultValue: 0, allowEditing: false, editType: "numericedit", format: "{0:n2}" },
                    { field: "TaxPercentage", headerText: 'Tax %', defaultValue: 0, editType: "numericedit", format: "{0:n2}" },
                    { field: "TaxAmount", headerText: 'Tax Amt', defaultValue: 0, visible: false, editType: "numericedit", format: "{0:n2}" },
                    { field: "Total", headerText: 'Total', defaultValue: 0, allowEditing: false, editType: "numericedit", format: "{0:n2}" },
                ],
                actionComplete: "complete",
                actionFailure: function (args) {
                    if (args.requestType == "save") {
                        var s = ej.parseJSON(args.error.responseText)
                        toastr.warning(s.message, "Cannot make sale");
                    }
                }
            });
            });




        });

        function complete(args) {

            if (args.requestType == 'beginedit') {
                $("#" + this._id + "_dialogEdit").ejDialog({ title: "Edit Record" });
            }
            if (args.requestType == 'save' || args.requestType == 'delete') {
                RewriteTotal(args.data.SalesOrderId);
            }
            if (args.requestType == 'beginedit' || args.requestType == 'add') {
                var selected = $('#GridGoodsRecievedNoteLineId').data('ejDropDownList');
                var selectedValue = parseInt(selected.option('value'));
                var selectedText = selected.option('text');
                $.ajax({
                    type: 'GET',
                    url: '/api/GoodsRecievedNoteLines/GetInstock',
                    success: function (data) {
                        if (args.requestType == 'beginedit') {
                            data.push({ 'GoodsRecievedNoteLineId': selectedValue, 'BatchID': selectedText });
                        }

                        $("#GridGoodsRecievedNoteLineId").ejDropDownList({
                            dataSource: data,
                            fields: { id: 'GoodsRecievedNoteLineId', text: 'BatchID', value: 'GoodsRecievedNoteLineId' },
                            value: selectedValue
                        });
                    }
                });
            }
        }

        function RewriteTotal(salesOrderId) {
            $.ajax({
                type: 'GET',
                url: '/api/SalesOrder/GetById/' + salesOrderId,
                success: function (data) {
                    $('#Amount').text(data.Amount);
                    $('#SubTotal').text(data.SubTotal);
                    $('#Discount').text(data.Discount);
                    $('#Tax').text(data.Tax);
                    $('#Freight').text(data.Freight);
                    $('#Total').text(data.Total);
                }
            });
        }



    </script>

}
