@model coderush.Models.Product
@{
    ViewData["Title"] = "Drug stock";
}
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
    <!-- Main content -->
    <section class="content">
        <!-- Default box -->
        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title"><i class="fa fa-building"></i> @ViewData["Title"]</h3>
                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                            title="Collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="box-body">
                <div class="content-container-fluid">
                    <div class="row">
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.DisplayNameFor(model => model.ProductName)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.ProductName)
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.TotalRecieved)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.TotalRecieved)
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.TotalSales)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.TotalSales)
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.InStock)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.InStock)
                            </dd>
                        </dl>
                    </div>
                    <button onclick="myFunction()">test</button>
                </div>
            </div>
            <!-- /.box-body -->
        </div>
        <!-- /.box -->
        <div class="box">
            <div class="box-body">
                <div class="row">
                    <div class="col-lg-12">
                        <div id="Grid"></div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-8">
                    </div>
                    <div class="col-lg-4">

                    </div>
                </div>
            </div>
        </div>

    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->


@section Styles{
}
@section Scripts{
    <script type="text/javascript">

        function myFunction() {
            data = {
                ProductId: @Model.ProductId,
                Start: "2022-05-09T21:00:00+00:00",
                End: "2022-06-13T21:00:00+00:00"

            }
            $.ajax({
                url: "/api/SalesOrderLine/GetSalesOrderLineByShipmentId",
                type: "GET",
                beforeSend: function (xhr) {
                     xhr.setRequestHeader("ProductId", @Model.ProductId);
                     xhr.setRequestHeader("Start", data.Start);
                     xhr.setRequestHeader("End", data.End);
                 },
                processData: false, // avoid the data being parsed to query string params
                success: function (result) {
                    console.log(result);
                },

            });
        }
        $(function ()
        {
             var dataManager = ej.DataManager({
                url: "/api/SalesOrderLine",
                adaptor: new ej.WebApiAdaptor(),
                 headers: [{ "ProductId": @Model.ProductId}],
                offline: true
            });
            var dataManagerProduct = ej.DataManager({
                url: "/api/Product",
                adaptor: new ej.WebApiAdaptor()
            });
            var dataManagerGoodsRecievedNoteLines = ej.DataManager({
                url: "/api/GoodsRecievedNoteLines",
                adaptor: new ej.WebApiAdaptor()
            });
            var dataManagerSalesOrder = ej.DataManager({
                url: "/api/SalesOrder",
                adaptor: new ej.WebApiAdaptor()
            });
            var dataManagerStock = ej.DataManager({
                url: "/api/Branch",
                adaptor: new ej.WebApiAdaptor()
            });
            var dataManagerCustomer = ej.DataManager({
                url: "/api/Customer",
                adaptor: new ej.WebApiAdaptor()
            });
            var dataManagerCurrency = ej.DataManager({
                url: "/api/Currency",
                adaptor: new ej.WebApiAdaptor()
            });
            var dataManagerSalesType = ej.DataManager({
                url: "/api/SalesType",
                adaptor: new ej.WebApiAdaptor()
            });
 
            dataManager.ready.done(function (e) {
            $("#Grid").ejGrid({
                dataSource: ej.DataManager({
                    json: e.result,
                    adaptor: new ej.remoteSaveAdaptor(),
                    insertUrl: "/api/SalesOrderLine/Insert",
                    updateUrl: "/api/SalesOrderLine/Update",
                    removeUrl: "/api/SalesOrderLine/Remove",
                }),
                toolbarSettings: {
                    showToolbar: true,
                    toolbarItems: ["add", "delete", "update", "cancel"]
                },
                editSettings: {
                    allowEditing: false,
                    allowAdding: true,
                    allowDeleting: true,
                    showDeleteConfirmDialog: true,
                },
                allowPaging: true,
                columns: [
                    { field: "SalesOrderLineId", headerText: 'Line Id', isPrimaryKey: true, isIdentity: true, visible: false },
                    { field: "SalesOrderId", headerText: 'SO#', foreignKeyField: "SalesOrderId", foreignKeyValue: "SalesOrderName", dataSource: dataManagerSalesOrder, visible: false },
                    { field: "ProductId", headerText: 'Product', foreignKeyField: "ProductId", foreignKeyValue: "ProductName", dataSource: dataManagerProduct, validationRules: { required: true }  },
                    { field: "GoodsRecievedNoteLineId", headerText: 'BatchID', foreignKeyField: "GoodsRecievedNoteLineId", foreignKeyValue: "BatchID", dataSource: dataManagerGoodsRecievedNoteLines, allowEditing: false },
                    { field: "Description", headerText: 'Description', visible: false },
                    { field: "Quantity", headerText: 'Qty', defaultValue: 1, editType: "numericedit", format: "{0:n2}"},
                    { field: "Price", headerText: 'Cost per unit', defaultValue: 0, editParams: { decimalPlaces: 2 }, editType: "numericedit", format: "{0:n2}" },
                    { field: "Amount", headerText: 'Amount', defaultValue: 0, allowEditing: false, editParams: { decimalPlaces: 2 }, editType: "numericedit", format: "{0:n2}" },
                    { field: "DiscountPercentage", headerText: 'Disc %', defaultValue: 0, editParams: { decimalPlaces: 2 }, editType: "numericedit", format: "{0:n2}" },
                    { field: "DiscountAmount", headerText: 'Disc Amt', defaultValue: 0, editParams: { decimalPlaces: 2 }, visible: false, editType: "numericedit", format: "{0:n2}" },
                    { field: "SubTotal", headerText: 'SubTotal', defaultValue: 0, editParams: { decimalPlaces: 2 }, allowEditing: false, editType: "numericedit", format: "{0:n2}" },
                    { field: "TaxPercentage", headerText: 'Tax %', defaultValue: 0, editParams: { decimalPlaces: 2 }, editType: "numericedit", format: "{0:n2}" },
                    { field: "TaxAmount", headerText: 'Tax Amt', defaultValue: 0, editParams: { decimalPlaces: 2 }, visible: false, editType: "numericedit", format: "{0:n2}" },
                    { field: "Total", headerText: 'Total', defaultValue: 0, editParams: { decimalPlaces: 2 }, allowEditing: false, editType: "numericedit", format: "{0:n2}" },
                ],
                actionComplete: "complete",
                actionFailure: function (args) {
                    if (args.requestType == "save") {
                        var s = ej.parseJSON(args.error.responseText)
                        toastr.warning(s.message, "Cannot make sale");
                    }
                    if (args.requestType == 'delete') {
                        var s = ej.parseJSON(args.error.error.responseText)
                        toastr.warning(s.message,"Cannot delete");
                    }
                }
            });
            });


        });


    </script>
}
