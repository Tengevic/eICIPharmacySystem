@model coderush.Models.Product
@{
    ViewData["Title"] = "Drug stock";
}
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
    <!-- Main content -->
    <section class="content">
        <!-- Default box -->
        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title"><i class="fa fa-building"></i> @ViewData["Title"]</h3>
                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                            title="Collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="box-body">
                <div class="content-container-fluid">
                    <div class="row">
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.DisplayNameFor(model => model.ProductName)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.ProductName)
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.TotalRecieved)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.TotalRecieved)
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.TotalSales)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.TotalSales)
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.InStock)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.InStock)
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>
            <!-- /.box-body -->
        </div>
        <!-- /.box -->
        <div class="box">
            <div class="box-body">
                <div class="row">
                    <div class="col-lg-12">
                        <div id="Grid"></div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-8">
                    </div>
                    <div class="col-lg-4">

                    </div>
                </div>
            </div>
        </div>

    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->


@section Styles{
}
@section Scripts{
    <script type="text/javascript">

        function myFunction() {

            $.ajax({
                url: "/api/SalesOrderLine/SaleHistory/" + @Model.ProductId,
                type: "GET",
                processData: false, // avoid the data being parsed to query string params
                success: function (result) {
                    console.log(result);
                },

            });
        }
        $(function ()
        {
             var dataManager = ej.DataManager({
                url: "/api/SalesOrderLine/SaleHistory/" + @Model.ProductId,
                adaptor: new ej.WebApiAdaptor(),
                offline: true
            });
            dataManager.ready.done(function (e) {
            $("#Grid").ejGrid({
                dataSource: ej.DataManager({
                    json: e.result,
                    adaptor: new ej.remoteSaveAdaptor(),

                }),
                toolbarSettings: {
                    showToolbar: true,
                    toolbarItems: ["printGrid"]
                },
                allowFiltering: true,
                filterSettings: {
                    filterType: "excel",
                    maxFilterChoices: 100,
                    enableCaseSensitivity: false
                },
                editSettings: {
                    allowEditing: false,
                    allowAdding: true,
                    allowDeleting: true,
                    showDeleteConfirmDialog: true,
                },
                allowPaging: true,
                pageSettings: { pageSize: 10, printMode: ej.Grid.PrintMode.CurrentPage },
                columns: [
                    { field: "ProductName", headerText: 'Product Name', validationRules: { required: true } },
                    { field: "SaleOrderName", headerText: 'Drug Sale number', allowEditing: false },
                    { field: "CustomerName", headerText: 'Customer Name', validationRules: { required: true } },
                    { field: "Quanity", headerText: 'Qty', defaultValue: 1, editType: "numericedit", format: "{0:n2}"},
                    { field: "saledate", headerText: 'Sell Date', editType: "datepicker", format: "{0:MM/dd/yyyy}", validationRules: { required: true } },
                    { field: "Total", headerText: 'Total', defaultValue: 0, editParams: { decimalPlaces: 2 }, allowEditing: false, editType: "numericedit", format: "{0:n2}" },
                ],
                actionComplete: "complete",
                actionFailure: function (args) {
                    if (args.requestType == "save") {
                        var s = ej.parseJSON(args.error.responseText)
                        toastr.warning(s.message, "Cannot make sale");
                    }
                    if (args.requestType == 'delete') {
                        var s = ej.parseJSON(args.error.error.responseText)
                        toastr.warning(s.message,"Cannot delete");
                    }
                }
            });
            });


        });


    </script>
}
