
@{ ViewData["Title"] = "Stock"; }
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">

    <!-- Main content -->
    <section class="content">
        <!-- Default box -->
        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title text-primary"><i class="fa fa-tag"></i> @ViewData["Title"]</h3>
                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                            title="Collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="box-body">
                <div id="Grid"></div>
            </div>
            <!-- /.box-body -->
            <div class="box-footer">

            </div>
            <!-- /.box-footer-->
        </div>
        <!-- /.box -->
    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->

@section Styles{

}

@section Scripts{

    <script type="text/javascript">
        $(function () {
            $.ajax({
                type: 'GET',
                url: '/api/Product/GetLow',
                success: function (data) {
                    if (data.Count != 0) {
                        var str = data.Count + " drugs are in low stock";
                        toastr.error(str + ", <a style='color:black' href='/Stocks/LowStock'> Click Here</a>", "Low Stock,")
                    }
                }
            });
            $.ajax({
                type: 'GET',
                url: '/api/GoodsRecievedNoteLines/GetExpired',
                success: function (data) {
                    console.log(data);
                    if (data.one != 0) {
                        var str = data.one + " drug batch(s) will expire in one month";
                        toastr.error(str + ", <a style='color:black' href='/Notifications/Index'> Click Here</a>", "Expiring drugs")
                    }
                    if (data.two != 0) {
                        var str = data.two + " drug batch(s) will expire in one month";
                        toastr.warning(str + ", <a style='color:black' href='/Notifications/Index'> Click Here</a>", "Expiring drugs")
                    }
                    if (data.three != 0) {
                        var str = data.three + " drug batch(s) will expire in one month";
                        toastr.info(str + ", <a style='color:black' href='/Notifications/Index'> Click Here</a>", "Expiring drugs")
                    }
                }
            });
            var dataManager = ej.DataManager({
                url: "/api/Product",
                adaptor: new ej.WebApiAdaptor(),
                offline: true
            });

            var dataManagerUnitOfMeasure = ej.DataManager({
                url: "/api/UnitOfMeasure",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerBranch = ej.DataManager({
                url: "/api/Branch",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerCurrency = ej.DataManager({
                url: "/api/Currency",
                adaptor: new ej.WebApiAdaptor()
            });

            dataManager.ready.done(function (e) {
                $("#Grid").ejGrid({
                    dataSource: ej.DataManager({
                        json: e.result,
                        adaptor: new ej.remoteSaveAdaptor(),
                      
                    }),
                    toolbarSettings: {
                        showToolbar: true,
                        toolbarItems: [ "search", "printGrid"]
                    },
                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowSorting: true,
                    allowSearching: true,
                    allowFiltering: true,
                    filterSettings: {
                        filterType: "excel",
                        maxFilterChoices: 100,
                        enableCaseSensitivity: false
                    },
                    allowPaging: true,
                    allowResizeToFit: true,
                    allowResizing: true,
                    pageSettings: { pageSize: 10, printMode: ej.Grid.PrintMode.AllPages },
                    columns: [
                        { headerText: 'Detail', template: "<a href='/Stocks/Detail/{{:ProductId}}'>Detail</a>" },
                        { headerText: 'sale history', template: "<a href='/Stocks/saleHistory/{{:ProductId}}'>sale history</a>" },
                        { field: "ProductId", headerText: 'Product Id', isPrimaryKey: true, isIdentity: true, visible: false },
                        { field: "ProductName", headerText: 'Product Name', validationRules: { required: true } },
                        { field: "UnitOfMeasureId", headerText: 'UOM', foreignKeyField: "UnitOfMeasureId", foreignKeyValue: "UnitOfMeasureName", dataSource: dataManagerUnitOfMeasure, validationRules: { required: true }, visible: false },
                        { field: "Barcode", headerText: 'Barcode', visible: false },
                        { field: "Description", headerText: 'Description', visible: false },
                        { field: "ProductImageUrl", headerText: 'ProductImageUrl', visible: false },
                        { field: "DefaultBuyingPrice", headerText: 'Buying Price', editType: "numericedit", format: "{0:n2}", visible: false },
                        { field: "DefaultSellingPrice", headerText: 'Selling Price', editType: "numericedit", format: "{0:n2}", visible: false },
                        { field: "BranchId", headerText: 'Branch', foreignKeyField: "BranchId", foreignKeyValue: "BranchName", dataSource: dataManagerBranch, defaultValue: 1, visible: false },
                        { field: "CurrencyId", headerText: 'Currency', allowEditing: false, foreignKeyField: "CurrencyId", foreignKeyValue: "CurrencyCode", dataSource: dataManagerCurrency, visible: false },
                        { field: "InStock", headerText: ' Units in stock', defaultValue: 0, editType: "numericedit", allowEditing: false },
                        { field: "TotalRecieved", headerText: 'total Units Recieved', defaultValue: 0, editType: "numericedit", allowEditing: false },
                        { field: "TotalSales", headerText: 'Total Units sold', defaultValue: 0, editType: "numericedit", allowEditing: false },
                        { field: "Deficit", headerText: ' Deficit stock', defaultValue: 0, editType: "numericedit", allowEditing: false, visible: false },
                        { field: "ExpiredStock", headerText: ' Expired stock', defaultValue: 0, editType: "numericedit", allowEditing: false },
                    ],
                    actionComplete: "complete",
                });
            });


        });

    </script>
}

