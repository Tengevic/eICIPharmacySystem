@model coderush.Models.GoodsReceivedNote
@{
    ViewData["Title"] = "Recieve Detail";
}
<style>
    .my-custom-scrollbar {
        position: relative;
        overflow: auto;
    }

    .table-wrapper-scroll-y {
        display: block;
    }
</style>
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
    <!-- Main content -->
    <section class="content">
        <!-- Default box -->
        <div class="row">
            <div class="col-lg-6">
                <div class="box" style="height:250px">
                    <div class="box-header with-border">
                        <h3 class="box-title"><i class="fa fa-building"></i> @ViewData["Title"]</h3>
                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                                    title="Collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                            <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                                <i class="fa fa-times"></i>
                            </button>
                        </div>
                    </div>
                    <div class="box-body">
                        <div class="content-container-fluid">
                            <div class="row">
                                <dl class="dl-horizontal">
                                    <dt>
                                        Drug Recieve ID
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.GoodsReceivedNoteId)
                                    </dd>
                                    <dt>
                                        Drug Recieved Number
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.GoodsReceivedNoteName)
                                    </dd>
                                    <dt>
                                        Recieved Date
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.GRNDate)
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.VendorDONumber)
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.VendorDONumber)
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.VendorInvoiceNumber)
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.VendorInvoiceNumber)
                                    </dd>

                                </dl>
                            </div>

                        </div>

                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="box" style="height:250px">
                    <div class="box-header with-border">
                        <h3 class="box-title text-primary"><i class="fa fa-pie-chart"></i> Purchase order</h3>
                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                                    title="Collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                            <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                                <i class="fa fa-times"></i>
                            </button>
                        </div>
                    </div>
                    <div class="box-body">
                        <div class="PurchaseOrder">
                            <div class="table-wrapper-scroll-y my-custom-scrollbar">
                                <table id="Prescription" align="center" class="table table-bordered table-striped mb-0">
                                    <thead>
                                        <tr>
                                            <th> # </th>
                                            <th>product Name</th>
                                            <th>Units of Measure</th>
                                            <th>Quantity</th>
                                            <th>Add</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- /.box -->
        <div class="box">
            <div class="box-body">
                <div class="row">
                    <div class="col-lg-12">
                        <div id="Grid"></div>
                    </div>
                </div>
     
            </div>
        </div>

    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->
<div id="dialog">
    <table class="table-condensed">
        <tr>
            <td>
                Drug Name:
            </td>
            <td>
                <label id="DrugName" name="DrugName"></label>
            </td>
            <td>
                Units of Measure:
            </td>
            <td>
                <label id="UnitsofMeasure" name="UnitsofMeasure"></label>
            </td>
        </tr>

        <tr>
            <td>
               Purchase Quantity:
            </td>
            <td>
                <label id="Quantity" name="Quantity"></label>
            </td>
            <td>
                Buying price per unit:
            </td>
            <td>
                <label id="Cost" name="Cost"></label>
            </td>
        </tr>
        <tr>
            <td>
                Batch No:
            </td>
            <td>
                <input id="BatchId" name="BatchId" />
            </td>
            <td>
                Units in Batch
            </td>
            <td>
                <input id="BatchQuanity" />
            </td>
        </tr>
        <tr>
            <td>
                Manufacture Date
            </td>
            <td>
                <input id="ManufareDate"  />
            </td>
            <td>
                Expiry Date
            </td>
            <td>
                <input id="ExpiryDate" />
            </td>

        </tr>
        <tr>
            <td>
                <button id="btnsubmit" type="button" onclick="Submit()"> Submit</button>
            </td>
            <td>
                <p id="sendp" style="color: green">Submiting... </p>
            </td>
        </tr>
    </table>

</div>

@section Styles{
}
@section Scripts{
    <script type="text/javascript">

        var Drug;
        var ExpiryDate;
        var ManufareDate;
        function myFunction(Item) {
       
            Drug = Item;
            $("#dialog").ejDialog("open");
            $("#sendp").hide();
            $("#DrugName").text(Item.Product.ProductName);
            $("#UnitsofMeasure").text(Item.Product.UnitOfMeasure.UnitOfMeasureName);
            $("#Quantity").text(Item.Quantity); 
            $("#Cost").text(Item.Product.DefaultBuyingPrice);
            $("#ManufareDate").ejDatePicker({
                width: "100%",
                change: function (args) {
                    ManufareDate = args.value;
                }
            });
            $("#ExpiryDate").ejDatePicker({
                width: "100%",
                change: function (args) {
                    ExpiryDate = args.value;
                }
            });
        }
        function Submit() {
            BatchQuanity = $("#BatchQuanity").val();
            if (BatchQuanity == "") {
                BatchQuanity = "0";
            }
            BatchId = $("#BatchId").val();
            data = {
                GoodsReceivedNoteId: @Model.GoodsReceivedNoteId,
                ProductId: Drug.ProductId,
                Dispose: false,
                Description: "",
                BatchID: BatchId,
                Quantity: parseInt(BatchQuanity),
                ManufareDate: ManufareDate,
                ExpiryDate: ExpiryDate,
                Sold: 0,
                InStock: 0,
                Expired: 0
            }
            if (data.BatchID == "") {
                toastr.warning("Enter batch Number");
            } else if (data.Quantity < 1) {
                toastr.warning("Batch Quantity cannot be less than 1")
            } else if (data.ManufareDate == null) {
                toastr.warning("Please enter Manufacture date")
            } else if (data.ExpiryDate == null) {
                toastr.warning("Please enter Expiry date")
            }
            else {
                $.ajax({
                    type: "POST",
                    contentType: "application/json;charset=utf-8",
                    data: JSON.stringify(data),
                    url: "/api/GoodsRecievedNoteLines/Add",
                    beforeSend: function () {
                        $("#sendp").show();
                        $("#btnsubmit").prop('disabled', true);
                    },
                    success: function (result) {
                        $("#sendp").hide();
                        $("#btnsubmit").prop('disabled', false);
                        toastr.success("Success");
                    },
                    error: function (result) {
                        $("#sendp").hide();
                        $("#btnsubmit").prop('disabled', false);
                        var s = ej.parseJSON(result.responseText)
                        toastr.warning(s.message, "Cannot add drug");
                    }
                });
            }
        }
        $(function () {
              $.ajax({
                        type: 'GET',
                        url: '/api/PurchaseOrderLine/GetByPurchaseOrderId/' +@Model.PurchaseOrderId ,
                        success: function (data) {
                            if (data.Count == 0) {
                                $("div.Prescription").replaceWith("<h4>No Purchase order Available</h4>");
                                } else {
                                var table = document.getElementById("Prescription");
                                item = data.Items;
                                for (let i = 0; i < item.length; i++) {
                                    var row = table.insertRow(-1);
                                    row.insertCell(0).innerHTML = i+1;
                                    row.insertCell(1).innerHTML = item[i].Product.ProductName;
                                    row.insertCell(2).innerHTML = item[i].Product.UnitOfMeasure.UnitOfMeasureName;
                                    row.insertCell(3).innerHTML = item[i].Quantity;
                                    row.insertCell(4).innerHTML = "<Input onclick='myFunction(item[" + i + "])' type='button' value = 'Add'>";

                                 }
                    }
                }
              });
            $('#dialog').ejDialog({
                title: "Recieved",
                showOnInit: false,
                height: 400,
                width: 600,
                close: function (args) {
                    location.reload();
                }
            });

            var dataManager = ej.DataManager({
                url: "/api/GoodsRecievedNoteLines",
                adaptor: new ej.WebApiAdaptor(),
                headers: [{ "GoodsReceivedNoteId": @Model.GoodsReceivedNoteId}],
                offline: true,
            });

            var dataManagerProduct = ej.DataManager({
                url: "/api/Product",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerGoodsReceivedNote = ej.DataManager({
                url: "/api/GoodsReceivedNote",
                adaptor: new ej.WebApiAdaptor()
            });




            dataManager.ready.done(function (e) {
            $("#Grid").ejGrid({
                dataSource: ej.DataManager({
                    json: e.result,
                    adaptor: new ej.remoteSaveAdaptor(),
                    insertUrl: "/api/GoodsRecievedNoteLines/Insert",
                    updateUrl: "/api/GoodsRecievedNoteLines/Update",
                    removeUrl: "/api/GoodsRecievedNoteLines/Remove",
                }),
                toolbarSettings: {
                    showToolbar: true,
                    toolbarItems: ["add", "edit", "delete", "update", "cancel"]
                },
                editSettings: {
                    allowEditing: true,
                    allowAdding: true,
                    allowDeleting: true,
                    showDeleteConfirmDialog: true,
                },
                allowPaging: true,
                actionFailure: "onFailure",
                columns: [
                    { field: "GoodsRecievedNoteLineId", headerText: 'Line Id', isPrimaryKey: true, isIdentity: true, visible: false },
                    { field: "GoodsReceivedNoteId", headerText: 'GNR#', defaultValue: @Model.GoodsReceivedNoteId, foreignKeyField: "GoodsReceivedNoteId", foreignKeyValue: "GoodsReceivedNoteName", dataSource: dataManagerGoodsReceivedNote, visible: false },
                    { field: "Dispose", headerText: 'Dispose', allowEditing: false, type: "boolean", editType: "booleanedit", defaultValue: false, visible: false },
                    { field: "ProductId", headerText: 'Drug', foreignKeyField: "ProductId", foreignKeyValue: "ProductName", dataSource: dataManagerProduct },
                    { field: "Description", headerText: 'Description', visible: false },
                    { field: "BatchID", headerText: 'BatchID', validationRules: { required: true }  },
                    { field: "Quantity", headerText: 'units/batch', defaultValue: 1, editType: "numericedit"},
                    { field: "ManufareDate", headerText: 'Manufacture Date', editType: "datepicker", format: "{0:MM/dd/yyyy}", validationRules: { required: true } },
                    { field: "ExpiryDate", headerText: 'Expiry Date', editType: "datepicker", format: "{0:MM/dd/yyyy}", validationRules: { required: true } },
                    { field: "Sold", headerText: 'Units sold', defaultValue: 0, editType: "numericedit", allowEditing: false, visible: false  },
                    { field: "InStock", headerText: ' stock', defaultValue: 0, editType: "numericedit", allowEditing: false, visible: false  },
                    { field: "Expired", headerText: ' Expired ', defaultValue: 0, editType: "numericedit", allowEditing: false, visible: false  },
                ],
                actionFailure: function (args) {
                    if (args.requestType == "save") {
                        var s = ej.parseJSON(args.error.responseText)
                        toastr.warning(s.message, "Cannot add drug");
                    }
                },
                actionComplete: function (args) {

                }
            });
            });


        });


    </script>
}
