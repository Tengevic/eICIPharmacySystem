@model coderush.Models.Prescription
@{ ViewData["Title"] = "Prescription Drugs"; }
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
    <!-- Main content -->
    <section class="content">
        <!-- Default box -->
        <div class="row">
            <div class="col-lg-6">
                <div class="box" style="height:250px">
                    <div class="box-header with-border">
                        <h3 class="box-title"><i class="fa fa-building"></i> @ViewData["Title"]</h3>
                        <button onclick="PrintPanel()">
                            <i class="fa fa-print"></i>
                        </button>
                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                                    title="Collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                            <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                                <i class="fa fa-times"></i>
                            </button>
                        </div>
                    </div>
                    <div class="box-body">
                        <div class="content-container-fluid" style="height: 150px;">
                            <div class="row">
                                <dl class="dl-horizontal">
                                    <dt>
                                        @Html.DisplayNameFor(model => model.PrescriptionId)
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.PrescriptionId)
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.PrescriptionName)
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.PrescriptionName)
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.Customer.CustomerName)
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.Customer.CustomerName)
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.presciptionDate)
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.presciptionDate)
                                    </dd>
                                    <dt>
                                        @Html.DisplayNameFor(model => model.Approved)
                                    </dt>
                                    <dd>
                                        <input type="checkbox" id="Approved" />
                                        <p id="ApproveP" style="color: green">Submiting... </p>
                                    </dd>
                                    <dt>
                                        Drug Sale Number
                                    </dt>
                                    <dd>
                                        @if (Model.SalesOrder != null)
                                        {
                            <a href="/SalesOrder/Detail/@Model.SalesOrder.SalesOrderId">@Html.DisplayFor(model => model.SalesOrder.SalesOrderName)</a> }
                                        else
                                        {
                            <button id="btnSale" type="button" onclick="MakeSale()"> Make sale</button>}
                                    </dd>
                                </dl>
                            </div>

                        </div>

                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="box" style="height:250px">
                    <div class="box-header with-border">
                        <h3 class="box-title text-primary"><i class="fa fa-pie-chart"></i> Prescriptions</h3>
                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                                    title="Collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                            <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                                <i class="fa fa-times"></i>
                            </button>
                        </div>
                    </div>
                    <div class="box-body">
                        <table class="table table-bordered table-striped mb-0">
                            <tr>
                                <td>
                                    Drug Name
                                </td>
                                <td>
                                    <label id="ProductId" name="ProductId"></label>
                                </td>
                                <td>
                                    Units of Measure:
                                </td>
                                <td>
                                    <label id="UnitsofMeasure" name="UnitsofMeasure"></label>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    Generic type
                                </td>
                                <td>
                                    <label id="genericType" name="genericType"></label>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    InStock
                                </td>
                                <td>
                                    <label id="instock" name="instock"></label>
                                </td>

                                <td>
                                    Selling price
                                </td>
                                <td>
                                    <label id="sellPrice" name="sellPrice"></label>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    Quantity:
                                </td>
                                <td>
                                    <label id="Quantity" name="Quantity"></label>
                                </td>
                                <td>
                                    Total Cost:
                                </td>
                                <td>
                                    <label id="Cost" name="cost"></label>
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <!-- /.box -->
        <div class="box">
            <div class="box-body">
                <div class="row">
                    <div class="col-lg-12">
                        <div id="Grid"></div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-8">
                    </div>
                    <div class="col-lg-4">

                    </div>
                </div>
            </div>
        </div>

    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->

<script>

</script>

@section Styles{
}
@section Scripts{
    <script type="text/javascript">
        function PrintPanel() {
            var message;
            $.ajax({
                type: 'GET',
                url: '/api/Prescription/Print/' +  @Model.PrescriptionId,
                success: function (data) {
                    message = data;
                    var printWindow = window.open('', '', 'height=400,width=800');
                    printWindow.document.write(message);
                    printWindow.document.close();
                    setTimeout(function () {
                        printWindow.print();
                    }, 500);
                    return false;
                }
            });

        }

        // Make sale order
        function MakeSale() {
            data = {
                BranchId: 1,
                CustomerId: @Model.CustomerId,
                CurrencyId: 1,
                PatientRefNumber: "@Model.Customer.EiciRefNumber",
                PrescriptionId: @Model.PrescriptionId,
                SalesTypeId: 1,
                Remarks: "",
                Amount: 0,
                SubTotal: 0,
                Discount: 0,
                Tax: 0,
                Freight: 0,
                Total: 0,

            }
            $.ajax({
                type: "POST",
                contentType: "application/json;charset=utf-8",
                data: JSON.stringify(data),
                url: "/api/SalesOrder/AddByPrescription",
                beforeSend: function () {

                },
                success: function (result) {
                    SalesOrderId = result.SalesOrderId;
                    window.location = "/SalesOrder/Detail/" + SalesOrderId;
                },
                error: function (result) {
                    var s = ej.parseJSON(result.responseText)
                    toastr.warning(s.message, "Cannot make sale");

                }
            });
        }
        function NewAmount(x) {
            Amount = x * Drugs.DefaultSellingPrice;
            $("#Cost").text(Amount);
        }
        // Add prescription from prescription table
        $(function () {
            var Drugs;
            $("#ApproveP").hide();
            // Approve button
            $("#Approved").ejCheckBox({
                checked: '@(Model.Approved)' === '@true',
                change: function (args) {
                    var check = args.isChecked;
                    console.log(args);

                    data = {
                        PrescriptionId: @Model.PrescriptionId,
                        PrescriptionName: "@Model.PrescriptionName",
                        CustomerId:@Model.CustomerId,

                        Approved: args.isChecked
                    }
                    $.ajax({
                        type: "POST",
                        contentType: "application/json;charset=utf-8",
                        data: JSON.stringify(data),
                        url: "/api/Prescription/Approve",
                        beforeSend: function () {
                            $("#ApproveP").show();
                        },
                        success: function (result) {
                            $("#ApproveP").hide();
                            if (result.Approved) {
                                toastr.success("Approved");
                            } else {
                                toastr.success("Success");
                            }

                        },
                        error: function (result) {
                            $("#ApproveP").hide();
                            var s = ej.parseJSON(result.responseText)
                            toastr.warning(s.message);
                        }
                    });
                }
            });

            var dataManager = ej.DataManager({
                url: "/api/PrescriptionLines",
                adaptor: new ej.WebApiAdaptor(),
                headers: [{ "PrescriptionId": @Model.PrescriptionId}],
                offline: true,
            });

            var dataManagerProduct = ej.DataManager({
                url: "/api/Product",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerPrescription = ej.DataManager({
                url: "/api/Prescription/GetPrescriptionData",
                adaptor: new ej.WebApiAdaptor()
            });
            dataManager.ready.done(function (e) {
            $("#Grid").ejGrid({
                dataSource: ej.DataManager({
                    json: e.result,
                    adaptor: new ej.remoteSaveAdaptor(),
                    insertUrl: "/api/PrescriptionLines/Insert",
                    updateUrl: "/api/PrescriptionLines/Update",
                    removeUrl: "/api/PrescriptionLines/Remove",
                }),
                toolbarSettings: {
                    showToolbar: true,
                    toolbarItems: ["add","edit","delete", "update", "cancel"]
                },
                editSettings: {
                    allowEditing: true,
                    allowAdding: true,
                    allowDeleting: true,
                    showDeleteConfirmDialog: true,
                },
                allowPaging: true,
                allowResizeToFit: true,
                allowResizing: true,
                columns: [
                    { field: "PrescriptionLinesId", headerText: 'Line Id', isPrimaryKey: true, isIdentity: true, visible: false },
                    { field: "PrescriptionId", headerText: 'PS#', defaultValue: @Model.PrescriptionId, foreignKeyField: "PrescriptionId", foreignKeyValue: "PrescriptionName", dataSource: dataManagerPrescription, visible: false },
                    { field: "ProductId", headerText: 'Drug', foreignKeyField: "ProductId", foreignKeyValue: "ProductName", dataSource: dataManagerProduct },
                    { field: "prescription", headerText: 'Prescription' },
                    { field: "Quantity", headerText: 'Quantity', defaultValue: 1, editType: "numericedit", format: "{0:n2}"},


                ],
                actionFailure: function (args) {
                    if (args.requestType == "save") {
                        var s = ej.parseJSON(args.error.responseText)
                        toastr.warning(s.message);
                    }
                    if (args.requestType == 'delete') {
                        var s = ej.parseJSON(args.error.error.responseText)
                        toastr.warning(s.message);
                    }
                },
                actionComplete: "complete",
            });
            });


        });

        function complete(args) {
            if (args.requestType == 'beginedit' || args.requestType == 'add') {
                $('#GridProductId').ejDropDownList({
                    change: function (args) {
                        $.ajax({
                            type: 'GET',
                            url: '/api/Product/GetProductbyId/' + args.value,
                            success: function (data) {
                                Drugs = data;
                                $("#genericType").text(data.ProductType.ProductTypeName);
                                $("#ProductId").text(data.ProductName);
                                $("#UnitsofMeasure").text(data.UnitOfMeasure.UnitOfMeasureName);
                                $("#instock").text(data.InStock);
                                $("#sellPrice").text(data.DefaultSellingPrice);
                                NewAmount(0);
                            }
                        });
                    }
                });
                $("#GridQuantity").ejNumericTextbox({
                    change: function (args) {
                        $("#Quantity").text(args.value)
                        NewAmount(args.value);
                    }
                });
            }
        }
    </script>
}